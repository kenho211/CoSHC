1<CODESPLIT>
https://github.com/drkjam/pydba/blob/986c4b1315d6b128947c3bc3494513d8e5380ff0/pydba/postgres.py#L170-L180<CODESPLIT>
PostgresDB.available<CODESPLIT>
Returns True if database server is running False otherwise .<CODESPLIT>

    def available(self, timeout=5):
        """Returns True if database server is running, False otherwise."""
        host = self._connect_args['host']
        port = self._connect_args['port']
        try:
            sock = socket.create_connection((host, port), timeout=timeout)
            sock.close()
            return True
        except socket.error:
            pass
        return False


0<CODESPLIT>
https://github.com/josuebrunel/yahoo-oauth/blob/40eff7809366850c46e1a3340469044f33cd1713/yahoo_oauth/yahoo_oauth.py#L158-L174<CODESPLIT>
BaseOAuth.refresh_access_token<CODESPLIT>
Parse oauth2 access<CODESPLIT>

    def refresh_access_token(self,):
        """Refresh access token
        """
        logger.debug("REFRESHING TOKEN")
        self.token_time = time.time()
        credentials = {
            'token_time': self.token_time
        }

        headers = self.generate_oauth2_headers()

        raw_access = self.oauth.get_raw_access_token(
            data={"refresh_token": self.refresh_token, 'redirect_uri': self.callback_uri, 'grant_type': 'refresh_token'}, headers=headers)
        credentials.update(self.oauth2_access_parser(raw_access))

        return credentials